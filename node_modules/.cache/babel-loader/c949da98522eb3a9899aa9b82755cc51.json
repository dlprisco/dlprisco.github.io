{"ast":null,"code":"useEffect(() => {\n  const canvas = canvasRef.current;\n  const ctx = canvas.getContext(\"2d\");\n\n  // Asignamos las dimensiones del canvas\n  canvas.width = 500;\n  canvas.height = 500;\n  let angulo = 0;\n  // Velocidades individuales para la rotación de cada cuadrado\n  let velocidades = [0.09, -0.020, 0.09, -0.030];\n  function dibujar() {\n    // Limpiamos el canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Trasladamos el origen al centro del canvas\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n\n    // -----------------------------------------------\n    // 1. Dibujar el círculo completo en un tono azul claro\n    // -----------------------------------------------\n    ctx.beginPath();\n    ctx.arc(0, 0, 130, 0, Math.PI * 2);\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = \"#ADD8E6\"; // Tono azul claro\n    ctx.stroke();\n\n    // -----------------------------------------------\n    // 2. Dibujar arcos en las \"esquinas\" del círculo\n    // -----------------------------------------------\n    // Usamos la rotación del primer cuadrado como referencia:\n    let baseRotation = angulo * velocidades[0];\n    // delta define la amplitud de cada arco (en radianes)\n    const delta = 0.2;\n    // Se dibujan 4 arcos, uno por cada \"esquina\"\n    for (let k = 0; k < 4; k++) {\n      let cornerAngle = baseRotation + Math.PI / 4 + k * (Math.PI / 2);\n      ctx.beginPath();\n      ctx.arc(0, 0, 130, cornerAngle - delta, cornerAngle + delta);\n      ctx.lineWidth = 4;\n      ctx.strokeStyle = \"#0F4C81\"; // Azul metalizado oscuro\n      ctx.stroke();\n    }\n\n    // -----------------------------------------------\n    // 3. Dibujar tres cuadrados con rotación individual\n    // -----------------------------------------------\n    for (let i = 0; i < 3; i++) {\n      ctx.save();\n      ctx.rotate(angulo * velocidades[i]);\n      ctx.beginPath();\n      let size = (3 - i) * 60; // Tamaño del cuadrado (de mayor a menor)\n      ctx.rect(-size / 2, -size / 2, size, size);\n      ctx.lineWidth = 3;\n      ctx.strokeStyle = \"#0F4C81\"; // Azul metalizado oscuro\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    // Restaura el contexto para el siguiente frame\n    ctx.resetTransform();\n\n    // Incrementa el ángulo para la animación\n    angulo += 0.02;\n    requestAnimationFrame(dibujar);\n  }\n  dibujar();\n}, []);","map":{"version":3,"names":["useEffect","canvas","canvasRef","current","ctx","getContext","width","height","angulo","velocidades","dibujar","clearRect","translate","beginPath","arc","Math","PI","lineWidth","strokeStyle","stroke","baseRotation","delta","k","cornerAngle","i","save","rotate","size","rect","restore","resetTransform","requestAnimationFrame"],"sources":["C:/Users/PcPrizko/dlprisco/src/Header.jsx"],"sourcesContent":["useEffect(() => {\r\n  const canvas = canvasRef.current;\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  // Asignamos las dimensiones del canvas\r\n  canvas.width = 500;\r\n  canvas.height = 500;\r\n\r\n  let angulo = 0;\r\n  // Velocidades individuales para la rotación de cada cuadrado\r\n  let velocidades = [0.09, -0.020, 0.09, -0.030];\r\n\r\n  function dibujar() {\r\n    // Limpiamos el canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Trasladamos el origen al centro del canvas\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n    // -----------------------------------------------\r\n    // 1. Dibujar el círculo completo en un tono azul claro\r\n    // -----------------------------------------------\r\n    ctx.beginPath();\r\n    ctx.arc(0, 0, 130, 0, Math.PI * 2);\r\n    ctx.lineWidth = 4;\r\n    ctx.strokeStyle = \"#ADD8E6\"; // Tono azul claro\r\n    ctx.stroke();\r\n\r\n    // -----------------------------------------------\r\n    // 2. Dibujar arcos en las \"esquinas\" del círculo\r\n    // -----------------------------------------------\r\n    // Usamos la rotación del primer cuadrado como referencia:\r\n    let baseRotation = angulo * velocidades[0];\r\n    // delta define la amplitud de cada arco (en radianes)\r\n    const delta = 0.2;\r\n    // Se dibujan 4 arcos, uno por cada \"esquina\"\r\n    for (let k = 0; k < 4; k++) {\r\n      let cornerAngle = baseRotation + Math.PI / 4 + k * (Math.PI / 2);\r\n      ctx.beginPath();\r\n      ctx.arc(0, 0, 130, cornerAngle - delta, cornerAngle + delta);\r\n      ctx.lineWidth = 4;\r\n      ctx.strokeStyle = \"#0F4C81\"; // Azul metalizado oscuro\r\n      ctx.stroke();\r\n    }\r\n\r\n    // -----------------------------------------------\r\n    // 3. Dibujar tres cuadrados con rotación individual\r\n    // -----------------------------------------------\r\n    for (let i = 0; i < 3; i++) {\r\n      ctx.save();\r\n      ctx.rotate(angulo * velocidades[i]);\r\n      ctx.beginPath();\r\n      let size = (3 - i) * 60; // Tamaño del cuadrado (de mayor a menor)\r\n      ctx.rect(-size / 2, -size / 2, size, size);\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeStyle = \"#0F4C81\"; // Azul metalizado oscuro\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n\r\n    // Restaura el contexto para el siguiente frame\r\n    ctx.resetTransform();\r\n\r\n    // Incrementa el ángulo para la animación\r\n    angulo += 0.02;\r\n    requestAnimationFrame(dibujar);\r\n  }\r\n\r\n  dibujar();\r\n}, []);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}